// 비트 연산 : 자주 사용되지는 않는 편

// 22 = 10110(2) -> char -> 00010110(2)
// 이러한 2진수의 각 자리수를 비교하면서 새로운 연산을 하는 것 == 비트 연산

// 비트 논리 연산
// 논리 연산 연산자 : && || !
// 비트 논리 연산자 : & | ^ ~

// 시프트 (shift) 연산

#include <stdio.h>

int main()
{
    char a = 12, b = 10;

    printf("%d\n", a & b); // and -> 두 수의 자리수가 모두 1일 때만 1, 아니면 0
    printf("%d\n", a | b); // or  -> 두 수의 자리수가 모두 0일 때만 0, 아니면 1
    printf("%d\n", a ^ b); // xor -> 두 수의 자리수가 모두 0이거나 1이면 0, 아니면 1
    printf("%d\n", ~a);    // not -> 모든 자리수를 반대로 바꿈. (0이면 1로, 1이면 0으로)

    // 12  == 1100(2) -> 00001100(2)
    // 10  == 1010(2) -> 00001010(2)

    // 8   == 1000(2) -> 00001000(2)
    // 14  == 1110(2) -> 00001110(2)
    // 6   == 0110(2) -> 00000110(2)
    // -13 == 0110(2) -> 11110011(2)
}
