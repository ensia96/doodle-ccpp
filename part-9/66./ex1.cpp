// 깊은 복사

#include <iostream>

using namespace std;

int main()
{
    int* a = new int(5);
    int* b = new int(3);

    /*
    // 두 포인터가 각각 동적으로 할당된 공간을 가리키고 있는 상황
    // -> 'a가 가리키고 있는 공간'에 'b가 가리키고 있는 공간에 저장된 값'을 집어넣고자 한다고 가정
    a = b; // 이렇게 작성하면, a가 'b가 가리키고 있는 공간'을 가리키게 됨 (주소값만 바뀜)
           // -> 기존에 a가 가리키고 있던 공간에 접근할 방법이 사라져서, 할당 해제도 불가능해짐
           // -> 아래처럼 할당 해제를 하면, 오류가 발생하게됨
           // -> 두 포인터가 같은 주소를 가리키고 있어서, 같은 공간에 대해 할당 해제를 2번 하게 되기 때문

    *a = *b; // 이렇게 작성하면, a가 가리키고 있는 공간에 b가 가리키고 있는 공간에 저장된 값이 대입됨
    */

    // a = b; // 얕은 복사 (참조만 복사)
    //           -> b의 참조가 a에 덮어씌워짐
    //           -> 포인터의 주소값만 바뀌는 식
    *a = *b; // 깊은 복사 (값을 복사)
             // -> b의 참조 대상의 값이 a의 참조 대상에 덮어씌워짐
             // -> 실제로 값이 저장되어 있는 공간에 다른 값이 저장됨

    // call-by-reference, call-by-value 와 비슷한 느낌
    // -> 포인터가 있는 모든 언어에서, 이러한 값과 참조에 관한 문제가 자주 발생함

    delete a;
    delete b;
}
